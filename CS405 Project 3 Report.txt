CS405 Project 3 Report Osman Kaan Demirba≈ü

Task 1:

In task 1 i implemented the draw function inside the sceneNode.js. I first got the transformation matrix from the trs object using this.trs.getTransformationMatrix(). I then applied this transformation to the modelMatrix by multiplying them together to have the transformedModel matrix. Similarly, I updated the modelView, normalMatrix, and mvp matrices by multiplying each with the transformation matrix to get transformedModelView, transformedNormals, and transformedMvp. Then I called the draw method of meshDrawer with the updated matrices to render the mesh. I iterated over all child nodes in this.children and recursively called their draw method with the updated matrices to ensure the entire scene graph is rendered correctly.

Task 2:
In task 2 i implemented the diffuse and specular lighting calculations in the fragment shader inside meshDrawer.js. For diffuse lighting, i calculated the dot product between the normalized surface normal and the light direction vector, then multiplied it by 0.6 to achieve balanced lighting. For the specular component, i first calculated the view direction as the normalized negative position vector since the camera is at the origin. Then i used the reflect function to get the reflection direction and implemented the Phong reflection model with a phong exponent of 8.0. I scaled the specular component by 0.4 to create subtle highlights. The final color was computed by combining the ambient (0.35), diffuse, and specular components and multiplying with the texture color.

Task 3:
In task 3 i added Mars to the solar system as a child of the sun node. I created a new MeshDrawer for Mars and set it up with the same sphere geometry used for other planets. I applied the Mars texture using the provided image URL. For the transformations, i created a TRS object and set the translation to -6 units on the X-axis relative to the sun, and scaled Mars uniformly by 0.35 on all axes as specified. I then created a new SceneNode for Mars with these properties and set it as a child of the sun node. In the renderLoop function, i implemented Mars's rotation to be 1.5 times the sun's rotation speed by setting its z-axis rotation to zRotation * 1.5. This completed the solar system by adding Mars with the correct position, size, and rotation speed relative to the other celestial bodies.
